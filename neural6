import os
import keras
import itertools
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pylab import rcParams
import matplotlib
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import IsolationForest
import warnings
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasRegressor
import csv
import statistics
import seaborn as sns
from scipy import stats
from scipy.stats import norm, skew
from sklearn.preprocessing import LabelEncoder

train = pd.read_csv('/Users/willzumbolo/PycharmProjects/machinelearning/train.csv')
train.drop('Id', axis=1, inplace=True)


train['Utilities'].replace({'AllPub': 100, 'NoSeWa': 76}, inplace=True)
train["Neighborhood"].replace({'Blmngtn': 58,
                               'Blueste': 41,
                               'BrDale': 31,
                               'BrkSide': 37,
                               'ClearCr': 63,
                               'CollgCr': 59,
                               'Crawfor': 63,
                               'Edwards':38,
                               'Gilbert': 58,
                               'IDOTRR': 30,
                               'MeadowV': 29,
                               'Mitchel': 47,
                               'NAmes': 43,
                               'NoRidge': 100,
                               'NPkVill': 43,
                               'NridgHt': 94,
                               'NWAmes': 56,
                               'OldTown': 38,
                               'SWISU': 43,
                               'Sawyer': 41,
                               'SawyerW': 56,
                               'Somerst': 67,
                               'StoneBr': 93,
                               'Timber': 72,
                               'Veenker': 71}, inplace=True)
train['BldgType'].replace({'1Fam': 100, '2fmCon': 69, 'Duplex': 72, 'TwnhsE': 98, 'Twnhs': 73}, inplace=True)
train['HouseStyle'].replace({'1Story': 80,
                             '1.5Fin': 65,
                             '1.5Unf': 50,
                             '2Story': 95,
                             '2.5Fin': 100,
                             '2.5Unf': 72,
                             'SFoyer': 61,
                             'SLvl': 76}, inplace=True)
train['CentralAir'].replace({'Y': 100, 'N': 57}, inplace=True)
train['GarageType'].replace({'2Types': 59,
                             'Attchd': 80,
                             'Basment': 63,
                             'BuiltIn': 100,
                             'CarPort': 43,
                             'Detchd': 53,
                             'NA': 41}, inplace=True)        # This shouldn't be zero, bug in test.py
train['SaleType'].replace({'WD': 63,
                           'CWD': 77,
                           'VWD': 0,
                           'New': 100,
                           'COD': 52,
                           'Con': 98,
                           'ConLw': 52,
                           'ConLI': 73,
                           'ConLD': 50,
                           'Oth': 44}, inplace=True)
train['SaleCondition'].replace({'Normal': 64,
                                'Abnorml': 54,
                                'AdjLand': 38,
                                'Alloca': 61,
                                'Family': 55,
                                'Partial': 100}, inplace=True)
train['LotShape'].replace({'Reg': 69, 'IR1': 86, 'IR2': 100, 'IR3': 90}, inplace=True)

train = train.select_dtypes(exclude=['object'])
train.fillna(0, inplace=True)

test = pd.read_csv('/Users/willzumbolo/PycharmProjects/machinelearning/test.csv')
test['Utilities'].replace({'AllPub': 100, 'NoSeWa': 76}, inplace=True)
test["Neighborhood"].replace({'Blmngtn': 58,
                               'Blueste': 41,
                               'BrDale': 31,
                               'BrkSide': 37,
                               'ClearCr': 63,
                               'CollgCr': 59,
                               'Crawfor': 63,
                               'Edwards':38,
                               'Gilbert': 58,
                               'IDOTRR': 30,
                               'MeadowV': 29,
                               'Mitchel': 47,
                               'NAmes': 43,
                               'NoRidge': 100,
                               'NPkVill': 43,
                               'NridgHt': 94,
                               'NWAmes': 56,
                               'OldTown': 38,
                               'SWISU': 43,
                               'Sawyer': 41,
                               'SawyerW': 56,
                               'Somerst': 67,
                               'StoneBr': 93,
                               'Timber': 72,
                               'Veenker': 71}, inplace=True)
test['BldgType'].replace({'1Fam': 100, '2fmCon': 69, 'Duplex': 72, 'TwnhsE': 98, 'Twnhs': 73}, inplace=True)
test['HouseStyle'].replace({'1Story': 80,
                             '1.5Fin': 65,
                             '1.5Unf': 50,
                             '2Story': 95,
                             '2.5Fin': 100,
                             '2.5Unf': 72,
                             'SFoyer': 61,
                             'SLvl': 76}, inplace=True)
test['CentralAir'].replace({'Y': 100, 'N': 57}, inplace=True)
test['GarageType'].replace({'2Types': 59,
                             'Attchd': 80,
                             'Basment': 63,
                             'BuiltIn': 100,
                             'CarPort': 43,
                             'Detchd': 53,
                             'NA': 41}, inplace=True)
test['SaleType'].replace({'WD': 63,
                           'CWD': 77,
                           'VWD': 0,
                           'New': 100,
                           'COD': 52,
                           'Con': 98,
                           'ConLw': 52,
                           'ConLI': 73,
                           'ConLD': 50,
                           'Oth': 44}, inplace=True)
test['SaleCondition'].replace({'Normal': 64,
                                'Abnorml': 54,
                                'AdjLand': 38,
                                'Alloca': 61,
                                'Family': 55,
                                'Partial': 100}, inplace=True)
test['LotShape'].replace({'Reg': 69, 'IR1': 86, 'IR2': 100, 'IR3': 90}, inplace=True)

ID = test.Id
test = test.select_dtypes(exclude=['object'])
test.drop('Id', axis=1, inplace=True)

warnings.filterwarnings('ignore')

col_train = list(train.columns)
col_train_bis = list(train.columns)

col_train_bis.remove('SalePrice')

mat_train = np.matrix(train)
mat_test = np.matrix(test)
mat_new = np.matrix(train.drop('SalePrice', axis=1))
mat_y = np.array(train.SalePrice).reshape((1460, 1))

prepro_y = MinMaxScaler()
prepro_y.fit(mat_y)

prepro = MinMaxScaler()
# mat_train.reshape()
prepro.fit(mat_train)

prepro_test = MinMaxScaler()
prepro_test.fit(mat_new)
# print(len(col_train_bis))
# print(mat_test.shape)

train = pd.DataFrame(prepro.transform(mat_train), columns=col_train)
test = pd.DataFrame(prepro_test.transform(mat_test), columns=col_train_bis)

train.head()

COLUMNS = col_train
FEATURES = col_train_bis
LABEL = "SalePrice"

feature_cols = FEATURES

training_set = train[COLUMNS]
prediction_set = train.SalePrice

x_train, x_test, y_train, y_test = train_test_split(training_set[FEATURES], prediction_set, test_size=0.33, random_state=42)
y_train = pd.DataFrame(y_train, columns=[LABEL])
training_set = pd.DataFrame(x_train, columns=FEATURES).merge(y_train, left_index=True, right_index=True)
training_set.head()

training_sub = training_set[col_train]

seed = 7
np.random.seed(seed)

# Neural
model = Sequential()
model.add(Dense(1600, input_dim=45, kernel_initializer='normal', activation='relu'))
model.add(Dense(800, kernel_initializer='normal', activation='relu'))
model.add(Dense(400, kernel_initializer='normal', activation='relu'))
model.add(Dense(200, kernel_initializer='normal', activation='relu'))
model.add(Dense(100, kernel_initializer='normal', activation='relu'))
model.add(Dense(50, kernel_initializer='normal', activation='relu'))
model.add(Dense(25, kernel_initializer='normal', activation='relu'))
model.add(Dense(1, kernel_initializer='normal'))
# Compile model
model.compile(loss='mean_squared_error', optimizer=keras.optimizers.adadelta_v2.Adadelta())

feature_cols = training_set[FEATURES]
labels = training_set[LABEL].values

model.fit(np.array(feature_cols), np.array(labels), epochs=1, batch_size=1)

# Predictions
col_test = list(test.columns)
testing_set = test[col_test]
# print(testing_set)
feature_cols_test = testing_set[FEATURES]
# labels_test = testing_set[LABEL].values
y = model.predict(np.array(feature_cols_test))
predictions = list(itertools.islice(y, testing_set.shape[0]))
predictions = prepro_y.inverse_transform(np.array(predictions).reshape(1459, 1))

# reality = pd.DataFrame(prepro.inverse_transform(testing_set), columns=[COLUMNS]).SalePrice

# graphing doesn't work because 'test' has no 'SalePrice'
# matplotlib.rc('xtick', labelsize=30)
# matplotlib.rc('ytick', labelsize=30)
#
# fig, ax = plt.subplots(figsize=(50, 40))
#
# plt.style.use('ggplot')
# plt.plot(predictions, reality, 'ro')
# plt.xlabel('Predictions', fontsize=30)
# plt.ylabel('Reality', fontsize=30)
# plt.title('Predictions x Reality on dataset Test', fontsize=30)
# ax.plot([reality.min(), reality.max()], [reality.min(), reality.max()], 'k--', lw=4)
# plt.show()

# Submitting
y_predict = model.predict(np.array(test))


def to_submit(pred_y, submit):
    y_predict = list(itertools.islice(pred_y, test.shape[0]))
    y_predict = pd.DataFrame(prepro_y.inverse_transform(np.array(y_predict).reshape(len(y_predict), 1)),
                             columns=['SalePrice'])
    y_predict = y_predict.join(ID)
    y_predict.to_csv(submit + '.csv', index=False)


to_submit(y_predict, "submission_continuous")
